name: NAStool Package
on:
  workflow_dispatch:
  push:
    branches:
      - main
    paths:
      - version.py
      - .github/workflows/build-package.yml
      - requirements.txt

jobs:
  Linux-build-amd64:
    runs-on: ubuntu-latest
    steps:
      - name: Init Python 3.10.10
        uses: actions/setup-python@v4
        with:
          python-version: '3.10.10'

      - name: Install dependent packages
        run: |
          python -m pip install --upgrade pip
          pip install wheel pyinstaller==5.7.0
          git clone --depth=1 -b main https://github.com/mysll/nts --recurse-submodule
          cd nts
          pip install -r requirements.txt
          echo ("NASTOOL_CONFIG=/home/runner/work/nts/nts/nts/config/config.yaml") >> $env:GITHUB_ENV
          echo $env:NASTOOL_CONFIG
        shell: pwsh

      - name: Package through pyinstaller
        run: |
          cd nts
          pwd
          ls -all
          cp ./package/rely/hook-cn2an.py /opt/hostedtoolcache/Python/3.10.10/x64/lib/python3.10/site-packages/PyInstaller/hooks/
          cp ./package/rely/hook-zhconv.py /opt/hostedtoolcache/Python/3.10.10/x64/lib/python3.10/site-packages/PyInstaller/hooks/
          cp ./package/rely/hook-iso639.py /opt/hostedtoolcache/Python/3.10.10/x64/lib/python3.10/site-packages/PyInstaller/hooks/
          cp ./third_party.txt ./package/
          cp ./package/rely/template.jinja2 /opt/hostedtoolcache/Python/3.10.10/x64/lib/python3.10/site-packages/setuptools/_vendor/pyparsing/diagram/
          cp -r ./web/. /opt/hostedtoolcache/Python/3.10.10/x64/lib/python3.10/site-packages/web/
          cp -r ./config/. /opt/hostedtoolcache/Python/3.10.10/x64/lib/python3.10/site-packages/config/
          cp -r ./scripts/. /opt/hostedtoolcache/Python/3.10.10/x64/lib/python3.10/site-packages/scripts/
          cd package
          pwd
          ls -all
          pyinstaller nas-tools.spec
          mv /home/runner/work/nts/nts/nts/package/dist/nas-tools /home/runner/work/nts/nts/nts/package/dist/nts.linux.amd64
          ls -all /home/runner/work/nts/nts/nts/package/dist
        shell: pwsh

      - name: Upload linux file
        uses: actions/upload-artifact@v3
        with:
          name: linux-amd64
          path: /home/runner/work/nts/nts/nts/package/dist/nts.linux.amd64

  
  Linux-build-amd64-musl:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@main

      - name: Set Up QEMU
        uses: docker/setup-qemu-action@v1

      - name: Set Up Buildx
        uses: docker/setup-buildx-action@v1

      - name: Package through pyinstaller
        run: |
          mkdir rootfs
          docker buildx build --platform linux/amd64 --file ./package/builder/alpine.Dockerfile --build-arg branch=main --output type=local,dest=./rootfs .
          mkdir -p /home/runner/work/nts/nts/nts/package/dist/
          cp ./rootfs/nas-tools /home/runner/work/nts/nts/nts/package/dist/nts.linux.musl.amd64
        shell: pwsh

      - name: Upload linux file
        uses: actions/upload-artifact@v3
        with:
          name: linux-musl-amd64
          path: /home/runner/work/nts/nts/nts/package/dist/nts.linux.musl.amd64

  Create-release_Send-message:
    permissions: write-all
    runs-on: ubuntu-latest
    needs: [Linux-build-amd64, Linux-build-amd64-musl]
    steps:
    - uses: actions/checkout@v2

    - name: Release version
      id: release_version
      run: |
        app_version=$(cat version.py |sed -ne "s/APP_VERSION\s=\s'v\(.*\)'/\1/gp")
        echo "app_version=$app_version" >> $GITHUB_ENV

    - name: Download exe and rename
      uses: actions/download-artifact@v3
    - name: get release_informations
      shell: bash
      run: |
        pwd
        ls -all
        mkdir releases
        mv ./linux-amd64/nts.linux.amd64 /home/runner/work/nts/nts/releases/nastool_linux_amd64_v${{ env.app_version }}
        mv ./linux-musl-amd64/nts.linux.musl.amd64 /home/runner/work/nts/nts/releases/nastool_linux_musl_amd64_v${{ env.app_version }}
        pwd
        ls -all

    - name: Create release
      id: create_release
      uses: actions/create-release@latest
      env:
        GITHUB_TOKEN: ${{ secrets.RELEASE_TOKEN }}
      with:
        tag_name: v${{ env.app_version }}
        release_name: v${{ env.app_version }}
        body: ${{ github.event.commits[0].message }}
        draft: false
        prerelease: false

    - name: Upload release asset
      uses: dwenegar/upload-release-assets@v1
      env:
        GITHUB_TOKEN: ${{ secrets.RELEASE_TOKEN }}
      with:
        release_id: ${{ steps.create_release.outputs.id }}
        assets_path: |
            /home/runner/work/nts/nts/releases/